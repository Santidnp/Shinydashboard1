"Tipo" = "Tipo_de_Documento")
)
}
if (d_15 == 0) {
cat("No hay nada")
} else {
fig_s2 <- plot_ly(dias_15_est, labels = ~Tipo_de_Documento, values = ~n, type = 'pie')
fig_s2 <- fig_s2 %>% layout(autosize = T,height = 280)
fig_s2
}
if (d_mas == 0) {
valueBox("", icon = "fa-pencil", color = "green")
} else if (d_mas != 0){
knitr::kable(dias_mas %>% dplyr::rename("Dependencia" = "Dep_Respuesta",
"Nro Radicado" = "Nro_Radicado",
"Fecha de vencimiento" = "fecha_vence",
"Tipo" = "Tipo_de_Documento")
)
}
if (d_mas == 0){
cat("No hay nada")
} else {
fig_s3 <- plot_ly(dias_mas_est, labels = ~Tipo_de_Documento, values = ~n, type = 'pie')
fig_s3 <- fig_s3 %>% layout(autosize = T,height = 280)
fig_s3
}
valueBox(paste0(pl1_data[4, n], " - ", round(pl1_data[4, p], 2), "%"), icon = "fa-pencil", color = "green")
valueBox(paste0(pl1_data[1, n], " - ", round(pl1_data[1, p], 2), "%"), icon = "fa-pencil", color = "blue")
valueBox(paste0(pl1_data[5, n], " - ", round(pl1_data[5, p], 2), "%"), icon = "fa-pencil", color = "orange")
valueBox(paste0(pl1_data[8, n], " - ", round(pl1_data[8, p], 2), "%"), icon = "fa-pencil", color = "green")
plot_ly(pl1_data %>% filter(Tipo_de_Documento %in% c("SUGERENCIA", "DENUNCIAS ACTOS DE CORRUPCIÓN EXTERNOS", "RECLAMO", "QUEJA")), labels = ~Tipo_de_Documento, values = ~n, type = 'pie') %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
valueBox(paste0(pl1_data[3, n], " - ", round(pl1_data[3, p], 2), "%"), icon = "fa-pencil", color = "green")
valueBox(paste0(pl1_data[8, n], " - ", round(pl1_data[8, p], 2), "%"), icon = "fa-pencil", color = "green")
plot_ly(pl1_data %>% filter(Tipo_de_Documento %in% c("SUGERENCIA", "DENUNCIAS ACTOS DE CORRUPCIÓN EXTERNOS", "RECLAMO", "QUEJA")), labels = ~Tipo_de_Documento, values = ~p, type = 'pie') %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
valueBox(paste0(pl1_data[3, n], " - ", round(pl1_data[3, p], 2), "%"), icon = "fa-pencil", color = "green")
valueBox(paste0(pl1_data[3, n], " - ", round(pl1_data[3, p], 2), "%"), icon = "fa-pencil", color = "green")
``
PQRSD recibidas
=====================================
### Recibidas por canal y tipo
```{r echo=FALSE, message=FALSE, warning=FALSE}
cro(tab_4$`Tipo de documento`,tab_4$`Medio de recepcion`)
x <- arima.sim(list(order=c(0,0,0)),200)
acf2(x)
x <- arima.sim(list(order=c(0,0,0)),200)
acf2(x)
x_fit <- sarima(x,p=0,d=0,q=0)
Datos_chi <- astsa::chicken ##Precio spot del pollo por libra en Georgia USA
x = diff(chicken)
plot(diff(chicken))
acf2(x,max.lag=60)
sarima(chicken,2,1,0)
sarima(chicken,2,1,0,1,0,0,12)
sarima.for(chicken,n.ahead=60,2,1,0,1,0,0,12)
sarima(chicken,2,1,0,1,0,0,12)
rm(list=ls())
Datos <- astsa:: unemp
plot(unemp)
d_unemp <- diff(unemp)
plot(d_unemp)
dd_unemp <- diff(d_unemp, lag = 12)
acf2(unemp)
d_unemp <- diff(unemp)
acf2(d_unemp)
dd_unemp <- diff(d_unemp, lag = 12)
acf2(d_unemp)
dd_unemp <- diff(diff(unemp), lag = 12)
sarima(unemp,2,1,0,0,1,1,12)
sarima.for(unemp,n.ahead=36,2,1,0,0,1,1,12) ##3 años en el futuro
for (i in c(1:1000)){
sarima.for(unemp,n.ahead=(36+i),2,1,0,0,1,1,12)
Sys.sleep(1)
}
Datos_nacimientos <- astsa::birth
plot(birth)
Datos_nacimientos <- astsa::birth
plot(birth)
plot(Datos_nacimientos)
d_birth <- diff(birth)
acf2(d_birth,max.lag=60)
d_birth <- diff(Datos_nacimientos)
acf2(d_birth,max.lag=60)
dd_birth <- diff(d_birth, lag = 12)
acf2(dd_birth,max.lag = 60)
sarima(birth,0,1,1,0,1,1,12)
25+21+20+21
(87*5)*100
(87*5)/100
20 +20+20+25
(85*5)/100
rm(list = ls())
# The number of points to create
n <- 200
# Set the range
xmin <- 0
xmax <- 1
ymin <- 0
ymax <- 2
x <- runif(n, 0,1)
y <- runif(n, 0,2)
# See pre-defined variables
ls.str()
mapxy <- function(a = NA){
plot(x, y, asp = a)
rect(xmin, ymin, xmax, ymax)
}
mapxy(1)
# Create this many points, in a circle of this radius
n_points <- 300
radius <- 10
# Generate uniform random numbers up to radius-squared
r_squared <- runif(n_points,0, radius^2)
angle <- runif(n_points, 0, 2*pi)
# Take the square root of the values to get a uniform spatial distribution
x <- sqrt(r_squared)* cos(angle)
y <- sqrt(r_squared) *sin(angle)
plot(x,y); points(x, y)
disc(radius)
ppxy <- ppp(x = x, y = y, window = disc(radius))
plot(ppxy)
summary(ppxy)
qt <- quadrat.test(ppxy)
plot(qt)
print(qt)
summary(qt)
# Create a disc of radius 10
disc10 <- disc(10)
# Compute the rate as count divided by area
lambda <- 500 / area(disc10)
# Create a point pattern object
ppois <- rpoispp(lambda = lambda, win = disc10)
# Plot the Poisson point pattern
plot(ppois)
set.seed(123)
p_cluster <- rThomas(kappa = 0.35, scale = 1, mu = 3, win = disc10)
plot(p_cluster)
p_regular <- rStrauss(beta = 2.9, gamma = 0.025, R = .5, W = disc10)
plot(p_regular)
# Run a quadrat test
quadrat.test(p_regular, alternative = "regular")
# Calc nearest-neighbor distances for Poisson point data
nnd_poisson <- nndist(p_poisson)
# Draw a histogram of nearest-neighbor distances
hist(nnd_poisson)
nnd_regular <- nndist(p_regular)
hist(nnd_regular)
G_regular <- Gest(p_regular)
plot(G_regular) ##Probabilidad muy baja de encontrar vecinos
# Estimate the K-function for the Poisson points
K_poisson <- Kest(p_poisson, correction = "border")
# The default plot shows quadratic growth
plot(K_poisson, . ~ r)
# Subtract pi * r ^ 2 from the Y-axis and plot
plot(K_poisson, . -pi*r^2 ~ r)
# Compute envelopes of K under random locations
K_cluster_env <- envelope(p_cluster,Kest, correction = "border")
library(spatstat)
set.seed(123)
p_cluster <- rThomas(kappa = 0.35, scale = 1, mu = 3, win = disc10)
# Create a disc of radius 10
disc10 <- disc(10)
# Compute the rate as count divided by area
lambda <- 500 / area(disc10)
# Create a point pattern object
ppois <- rpoispp(lambda = lambda, win = disc10)
# Plot the Poisson point pattern
plot(ppois)
p_cluster <- rThomas(kappa = 0.35, scale = 1, mu = 3, win = disc10)
p_regular <- rStrauss(beta = 2.9, gamma = 0.025, R = .5, W = disc10)
p_regular <- rStrauss(beta = 2.9, gamma = 0.025, R = .5, W = disc10)
plot(p_regular)
# Run a quadrat test
quadrat.test(p_regular, alternative = "regular")
# Calc nearest-neighbor distances for Poisson point data
nnd_poisson <- nndist(p_poisson)
# Draw a histogram of nearest-neighbor distances
hist(nnd_poisson)
source('C:/Users/sngh9/OneDrive/Escritorio/Espacio temporal/Estadisitica espacial.R')
source('C:/Users/sngh9/OneDrive/Escritorio/Espacio temporal/Estadisitica espacial.R')
source('C:/Users/sngh9/OneDrive/Escritorio/Espacio temporal/Estadisitica espacial.R')
rm(list = ls())
library(spatstat)
# The number of points to create
n <- 200
# Set the range
xmin <- 0
xmax <- 1
ymin <- 0
ymax <- 2
x <- runif(n, 0,1)
y <- runif(n, 0,2)
# See pre-defined variables
ls.str()
mapxy <- function(a = NA){
plot(x, y, asp = a)
rect(xmin, ymin, xmax, ymax)
}
mapxy(1)
# Create this many points, in a circle of this radius
n_points <- 300
radius <- 10
# Generate uniform random numbers up to radius-squared
r_squared <- runif(n_points,0, radius^2)
angle <- runif(n_points, 0, 2*pi)
# Take the square root of the values to get a uniform spatial distribution
x <- sqrt(r_squared)* cos(angle)
y <- sqrt(r_squared) *sin(angle)
plot(x,y); points(x, y)
disc(radius)
ppxy <- ppp(x = x, y = y, window = disc(radius))
plot(ppxy)
summary(ppxy)
qt <- quadrat.test(ppxy)
plot(qt)
print(qt)
summary(qt)
# Create a disc of radius 10
disc10 <- disc(10)
# Compute the rate as count divided by area
lambda <- 500 / area(disc10)
# Create a point pattern object
ppois <- rpoispp(lambda = lambda, win = disc10)
# Plot the Poisson point pattern
plot(ppois)
set.seed(123)
p_cluster <- rThomas(kappa = 0.35, scale = 1, mu = 3, win = disc10)
plot(p_cluster)
p_regular <- rStrauss(beta = 2.9, gamma = 0.025, R = .5, W = disc10)
plot(p_regular)
# Run a quadrat test
quadrat.test(p_regular, alternative = "regular")
# Calc nearest-neighbor distances for Poisson point data
nnd_poisson <- nndist(p_poisson)
# Draw a histogram of nearest-neighbor distances
hist(nnd_poisson)
nnd_regular <- nndist(p_regular)
hist(nnd_regular)
G_regular <- Gest(p_regular)
plot(G_regular) ##Probabilidad muy baja de encontrar vecinos
sys.date()
library(sp)
#################################################################################################
spatstat.data::
data(bigfoot)
library(sp)
data(bigfoot)
install.packages("sp")
install.packages("sp")
#################################################################################################
spatstat.data::
library(sp)
data(bigfoot)
library(datasets)
data(bigfoot)
datasets
data(bigfoot)
plot(p_cluster)
p_regular <- rStrauss(beta = 2.9, gamma = 0.025, R = .5, W = disc10)
plot(p_regular)
p_poisson <- ppois
# Calc nearest-neighbor distances for Poisson point data
nnd_poisson <- nndist(p_poisson)
library(spatstat)
# Calc nearest-neighbor distances for Poisson point data
nnd_poisson <- nndist(p_poisson)
# Draw a histogram of nearest-neighbor distances
hist(nnd_poisson)
G_poisson <- Gest(p_poisson)
# Plot G(r) vs. r
plot(G_poisson)
nnd_regular <- nndist(p_regular)
hist(nnd_regular)
G_regular <- Gest(p_regular)
plot(G_regular) ##Probabilidad muy baja de encontrar vecinos
plot(p_regular)
# Run a quadrat test
quadrat.test(p_regular, alternative = "regular")
# Estimate the K-function for the Poisson points
K_poisson <- Kest(p_poisson, correction = "border")
# The default plot shows quadratic growth
plot(K_poisson, . ~ r)
nnd_cluster <- nndist(p_cluster)
hist(nnd_cluster)
G_cluster <- Gest(p_cluster)
plot(G_cluster)
plot(G_regular) ##Probabilidad muy baja de encontrar vecinos
plot(G_cluster)
G_poisson <- Gest(p_poisson)
# Plot G(r) vs. r
plot(G_poisson)
G_cluster <- Gest(p_cluster)
plot(G_cluster)
nnd_regular <- nndist(p_regular)
G_regular <- Gest(p_regular)
G_regular <- Gest(p_regular)
plot(G_regular) ##Probabilidad muy baja de encontrar vecinos
library(spatstat)
library(sp)
DIVIPOLA_XY <- read_excel("C:/Users/sngh9/OneDrive/Escritorio/Espacio temporal/DIVIPOLA_CPOB_MAR2017_XY.xls")
radius <- 300
pp <- ppp(x=DIVIPOLA_XY$LAT_Y,y=DIVIPOLA_XY$LONG_X,window = disc(radius))
plot(pp)
ppp()
summary(pp)
DIVIPOLA_XY <- read_excel("C:/Users/sngh9/OneDrive/Escritorio/Espacio temporal/DIVIPOLA_CPOB_MAR2017_XY.xls")
library(readxl)
DIVIPOLA_XY <- read_excel("C:/Users/sngh9/OneDrive/Escritorio/Espacio temporal/DIVIPOLA_CPOB_MAR2017_XY.xls")
radius <- 300
pp <- ppp(x=DIVIPOLA_XY$LAT_Y,y=DIVIPOLA_XY$LONG_X,window = disc(radius))
plot(pp)
radius <- 30
pp <- ppp(x=DIVIPOLA_XY$LAT_Y,y=DIVIPOLA_XY$LONG_X,window = disc(radius))
plot(pp)
??owin object
load(url("http://github.com/mgimond/Spatial/raw/master/Data/ppa.RData"))
View(starbucks)
rm(list = ls())
# Poker and roulette winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Which days did you make money on roulette?
selection_vector <- roulette_vector > 0
# Select from roulette_vector these days
roulette_winning_days <- roulette_vector[selection_vector]
roulette_winning_days
#Matrices
matrix(1:9, byrow = TRUE, nrow = 3)
library(shiny); runApp('C:/Users/sngh9/OneDrive/Escritorio/ejercicios R/Shiny/Shinydashboardtutorial.R')
install.packages("shiny")
speed_vector <- c("medium","slow","slow","medium","fast")
levels(speed_vector)
factor_speed_vector <- factor(
speed_vector,
ordered = TRUE,
levels = c("slow","medium","fast")
)
###Data frames
mtcars
str(mtcars)
dd <- c()
pares <- function(a){
pares_v <- NULL
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
}
pares <- function(a){
pares_v <- c()
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
}
pares <- function(a){
pares_v <- c()
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
pares_v <- c()
a <- c(1,2)
pares_v <- c(pares_v,a[1])
pares_v
pares_v <- c(pares_v,a[2])
pares_v
pares <- function(a){
pares_v <- c()
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
pares <- function(a){
pares_v <- c()
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
length(a)
pares <- function(a){
pares_v <- c()
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
pares <- function(a){
pares_v <- c()
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
pares <- function(a){
pares_v <- c()
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
pares <- function(a){
pares_v <- c()
for(i in length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
for(i in 1:length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
for(i in 1:length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
for(i in 1:length(a)){
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
}
if(a[i]%2==){
pares_v <- c(pares_v,a[i])
}
if(a[1]%2==){
pares_v <- c(pares_v,a[1])
}
pares <- function(a){
pares_v <- c()
for(i in 1:length(a)){
if(a[i]%2==0){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
if(a[1]%2==0){
pares_v <- c(pares_v,a[1])
}
a[1]
a[1]%2
a[1]%%2
if(a[1]%%2==0){
pares_v <- c(pares_v,a[1])
}
pares <- function(a){
pares_v <- c()
for(i in 1:length(a)){
if(a[i]%%2==0){
pares_v <- c(pares_v,a[i])
}
}
print(pares_v)
}
pares_v(c(1,3,45,44,32,12,45))
pares(c(1,3,45,44,32,12,45))
pares(c(1,3,45,44,32,12,45))
pares(0)
pares(c(23,44,12,5))
order(pares(c(1,3,45,44,32,12,45)))
seyy <- order(pares(c(1,3,45,44,32,12,45)))
seyy <- [order(pares(c(1,3,45,44,32,12,45)))]
seyy <- [order(pares(c(1,3,45,44,32,12,45)))]
182-75
106+75
rm(list = ls())
starwars <- dplyr::starwars
View(starwars)
library(shiny); runApp('C:/Users/sngh9/OneDrive/Escritorio/ejercicios R/Shiny/Shinydashboardtutorial.R')
install.packages("shiny")
View(starwars)
View(starwars)
View(starwars)
View(starwars)
View(starwars)
View(starwars)
write.csv2(starwars)
setwd(C:/Users/sngh9/OneDrive/Escritorio/ejercicios R/Shiny)
setwd("C:/Users/sngh9/OneDrive/Escritorio/ejercicios R/Shiny")
write.csv2(starwars)
write.csv2(starwars,"starwars.csv")
write.csv2(starwars[,c(1:10)],"starwars.csv")
runApp('Shinydashboardtutorial.R')
install.packages("shiny")
install.packages("shinydashboard")
install.packages("shinydashboard")
